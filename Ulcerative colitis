import joblib
import pandas as pd
import streamlit as st
from sklearn.preprocessing import LabelEncoder

# Set custom theme using st.set_page_config
st.set_page_config(
Â  Â  page_title="Ulcerative Colitis Prediction",
Â  Â  page_icon="ðŸ”¬", Â # Icon in browser tab
Â  Â  layout="wide", Â # Wide layout
Â  Â  initial_sidebar_state="collapsed", Â # Collapse sidebar by default
)

# Load the saved model
model = joblib.load('xgb_ulcerative_colitis_model.pkl')

# Initialize LabelEncoder
encoder = LabelEncoder()
encoder.fit(["Low", "Moderate", "High"]) Â # Match with training data categories

# Classification key for the prediction
classification_key = {
Â  Â  0: "No Ulcerative Colitis",
Â  Â  1: "Ulcerative Colitis Detected"
}


rative Colitis given the input features.

Â  Â  Args:
Â  Â  Â  Â  model: Trained XGBoost model.
Â  Â  Â  Â  input_data (dict): Input data with feature names as keys and their values.
Â  Â  Â  Â  encoder (LabelEncoder): Encoder for categorical variables.
Â  Â  Â  Â  classification_key (dict): Mapping of prediction output to human-readable classes.

Â  Â  Returns:
Â  Â  Â  Â  str: Human-readable prediction result.
Â  Â  """
Â  Â  # Preprocess the input
Â  Â  processed_input = preprocess_input(input_data, encoder)
Â  Â  
Â  Â  # Make prediction
Â  Â  prediction = model.predict(processed_input)

Â  Â  # Return human-readable classification
Â  Â  return classification_key[int(prediction[0])]

# Function to display the landing page
def landing_page():
Â  Â  # Set background color and animations using CSS
Â  Â  st.markdown("""
Â  Â  Â  Â  <style>
Â  Â  Â  Â  Â  Â  .reportview-container {
Â  Â  Â  Â  Â  Â  Â  Â  background-color: #e0f7fa; Â /* Light cyan background */
Â  Â  Â  Â  Â  Â  }




Â  Â  Â  Â  Â  .sidebar .sidebar-content {
Â  Â  Â  Â  Â  Â  Â  Â  background-color: #00796b; Â /* Teal background for sidebar */
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  h1, h2, h3, p {
Â  Â  Â  Â  Â  Â  Â  Â  color: #004d40; Â /* Dark teal text color */
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  /* Icon animations */
Â  Â  Â  Â  Â  Â  .icon {
Â  Â  Â  Â  Â  Â  Â  Â  font-size: 50px;
Â  Â  Â  Â  Â  Â  Â  Â  color: #00796b;
Â  Â  Â  Â  Â  Â  Â  Â  transition: transform 0.5s ease;
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  .icon:hover {
Â  Â  Â  Â  Â  Â  Â  Â  transform: rotate(360deg); Â /* Rotate the icon on hover */
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  .icon-fade {
Â  Â  Â  Â  Â  Â  Â  Â  animation: fadeIn 1.5s ease-in-out;
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  @keyframes fadeIn {
Â  Â  Â  Â  Â  Â  Â  Â  0% { opacity: 0; }
Â  Â  Â  Â  Â  Â  Â  Â  100% { opacity: 1; }
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  </style>
Â  Â  """, unsafe_allow_html=True)
Â  Â  
Â  Â  st.title("Ulcerative Colitis Prediction")
Â  Â  st.markdown("""
Â  Â  Â  Â  <h2 style="tdef preprocess_input(input_data, encoder):
Â  Â  """
Â  Â  Preprocess input data to match the training data structure.
Â  Â  Args:
Â  Â  Â  Â  input_data (dict): Input data with keys as feature names.
Â  Â  Â  Â  encoder (LabelEncoder): Encoder for categorical variables.

Â  Â  Returns:
Â  Â  Â  Â  pd.DataFrame: Preprocessed input data.

# Convert input dictionary to a DataFrame
Â  Â  input_df = pd.DataFrame([input_data])


Â  


Â  Â  # Encode categorical columns
Â  Â  for col in ['Dietary_Fiber_Intake', 'Physical_Activity_Level']:
Â  Â  Â  Â  input_df[col] = encoder.transform(input_df[col])

Â  Â  return input_df

def predict_ulcerative_colitis(model, input_data, encoder, classification_key):
Â  Â  """
Â  Â  Predict Ulceext-align: center;">Welcome to the Ulcerative Colitis Prediction App</h2>
Â  Â  Â  Â  <p style="text-align: center;">
Â  Â  Â  Â  Â  Â  This app uses machine learning to predict the likelihood of Ulcerative Colitis based on key health and lifestyle factors.
Â  Â  Â  Â  </p>
Â  Â  Â  Â  <hr>
Â  Â  """, unsafe_allow_html=True)

Â  Â  # Add Image
Â  Â  st.image('https://d2jx2rerrg6sh3.cloudfront.net/images/news/ImageForNews_763967_16995014253356857.jpg', use_container_width=True)

Â  Â  # About the Project
Â  Â  st.subheader("About the Project")
Â  Â  st.markdown("""
Â  Â  Â  Â  Ulcerative Colitis is a chronic condition that affects the large intestine and rectum, causing inflammation and ulcers.
Â  Â  Â  Â  Predicting the likelihood of Ulcerative Colitis early can help in preventive measures and improve the management of the condition.
Â  Â  
Â  Â  Â  Â  This app uses a machine learning model trained on various factors such as:
Â  Â  Â  Â  - Age
Â  Â  Â  Â  - Family History
Â  Â  Â  Â  - BMI (Body Mass Index)
Â  Â  Â  Â  - Smoking History
Â  Â  Â  Â  - Dietary Fiber Intake
Â  Â  Â  Â  - Physical Activity Level
Â  Â  Â  Â  - Stress Level
Â  Â  Â  Â  - Medication Use
Â  Â  
Â  Â  Â  Â  

 By entering these details, the app will predict whether there is a risk of developing Ulcerative Colitis or not. """)
# Add animated icons
Â  Â  st.markdown("""
Â  Â  Â  Â  <div style="display: flex; justify-content: center; gap: 20px;">
Â  Â  Â  Â  Â  Â  <i class="fas fa-users icon icon-fade"></i>
Â  Â  Â  Â  Â  Â  <i class="fas fa-heartbeat icon icon-fade"></i>
Â  Â  Â  Â  Â  Â  <i class="fas fa-brain icon icon-fade"></i>
Â  Â  Â  Â  </div>
Â  Â  Â  Â  <div style="text-align: center;">
Â  Â  Â  Â  Â  Â  <p>Early detection of health conditions | Improve patient care | Powered by Machine Learning</p>
Â  Â  Â  Â  </div>
Â  Â  """, unsafe_allow_html=True)

Â  Â  # Button to navigate to the prediction page
Â  Â  if st.button("Go to Prediction Page"):
Â  Â  Â  Â  st.session_state.page = "prediction"

# Function to display the prediction page
def prediction_page():
Â  Â  # Set background color and animations using CSS
Â  Â  st.markdown


Â  Â  

("""
Â  Â  Â  Â  <style>
Â  Â  Â  Â  Â  Â  .reportview-container {
Â  Â  Â  Â  Â  Â  Â  Â  background-color: #e0f7fa; Â /* Light cyan background */
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  .sidebar .sidebar-content {
Â  Â  Â  Â  Â  Â  Â  Â  background-color: #00796b; Â /* Teal background for sidebar */
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  h1, h2, h3, p {
Â  Â  Â  Â  Â  Â  Â  Â  color: #004d40; Â /* Dark teal text color */
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  /* Icon animations */
Â  Â  Â  Â  Â  Â  .icon {
Â  Â  Â  Â  Â  Â  Â  Â  font-size: 50px;
Â  Â  Â  Â  Â  Â  Â  Â  color: #00796b;
Â  Â  Â  Â  Â  Â  Â  Â  transition: transform 0.5s ease;
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  .icon:hover {
Â  Â  Â  Â  Â  Â  Â  Â  transform: rotate(360deg); Â /* Rotate the icon on hover */
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  .icon-fade {
Â  Â  Â  Â  Â  Â  Â  Â  animation: fadeIn 1.5s ease-in-out;
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  @keyframes fadeIn {
Â  Â  Â  Â  Â  Â  Â  Â  0% { opacity: 0; }
Â  Â  Â  Â  Â  Â  Â  Â  100% { opacity: 1; }
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  </style>
Â  Â  """, unsafe_allow_html=True)

Â  Â  st.title("Ulcerative Colitis Prediction - Enter your Information")

Â  Â  # Input form for prediction
Â  Â  age = st.number_input("Age", min_value=1, max_value=120, value=69)
Â  Â  family_history = st.selectbox("Family History", [0, 1]) Â # 0 = No, 1 = Yes
Â  Â  bmi = st.number_input("BMI", min_value=10.0, max_value=50.0, value=25.69)
Â  Â  smoking_history = st.selectbox("Smoking History", [0, 1]) Â # 0 = No, 1 = Yes
Â  Â  dietary_fiber_intake = st.selectbox("Dietary Fiber Intake", ["Low", "Moderate", "High"])
Â  Â  physical_activity_level = st.selectbox("Physical Activity Level", ["Low", "Moderate", "High"])
Â  Â  stress_level = st.slider("Stress Level", min_value=0, max_value=10, value=7)
Â  Â  medication_use = st.selectbox("Medication Use", [0, 1]) Â # 0 = No, 1 = Yes



Â  Â # Prepare the input data
Â  Â  input_data = {
Â  Â  Â  Â  "Age": age,
Â  Â  Â  Â  "Family_History": family_history,
Â  Â  Â  Â  "BMI": bmi,
Â  Â  Â  Â  "Smoking_History": smoking_history,
Â  Â  Â  Â  "Dietary_Fiber_Intake": dietary_fiber_intake,
Â  Â  Â  Â  "Physical_Activity_Level": physical_activity_level,
Â  Â  Â  Â  "Stress_Level": stress_level,
Â  Â  Â  Â  "Medication_Use": medication_use
Â  Â  }
 
# Predict and display result
Â  Â  if st.button("Predict"):
Â  Â  Â  Â  prediction = predict_ulcerative_colitis(model, input_data, encoder, classification_key)
Â  Â  Â  Â  st.write(f"Prediction: {prediction}")
Â  Â  
Â  Â  # Button to go back to the landing page
Â  Â  if st.button("Back to Landing Page"):
Â  Â  Â  Â  st.session_state.page = "landing"

# Main app logic
if "page" not in st.session_state:
Â  Â  st.session_state.page = "landing" Â # Default to landing page

if st.session_state.page == "landing":
Â  Â  landing_page()
elif st.session_state.page == "prediction":
Â  Â  prediction_page()
